### Starting build.
# Target: main.ml.depends, tags: { extension:ml, file:main.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules main.ml > main.ml.depends # cached
# Target: algorithm.mli.depends, tags: { extension:mli, file:algorithm.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules algorithm.mli > algorithm.mli.depends # cached
# Target: MFOTL.mli.depends, tags: { extension:mli, file:MFOTL.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules MFOTL.mli > MFOTL.mli.depends # cached
# Target: predicate.mli.depends, tags: { extension:mli, file:predicate.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules predicate.mli > predicate.mli.depends # cached
# Target: predicate.cmi, tags: { byte, compile, extension:mli, file:predicate.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o predicate.cmi predicate.mli # cached
# Target: MFOTL.cmi, tags: { byte, compile, extension:mli, file:MFOTL.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o MFOTL.cmi MFOTL.mli # cached
# Target: algorithm.cmi, tags: { byte, compile, extension:mli, file:algorithm.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o algorithm.cmi algorithm.mli # cached
# Target: filter_empty_tp.mli.depends, tags: { extension:mli, file:filter_empty_tp.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules filter_empty_tp.mli > filter_empty_tp.mli.depends # cached
# Target: filter_empty_tp.cmi, tags: { byte, compile, extension:mli, file:filter_empty_tp.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o filter_empty_tp.cmi filter_empty_tp.mli # cached
# Target: filter_rel.mli.depends, tags: { extension:mli, file:filter_rel.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules filter_rel.mli > filter_rel.mli.depends # cached
# Target: tuple.mli.depends, tags: { extension:mli, file:tuple.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules tuple.mli > tuple.mli.depends # cached
# Target: tuple.cmi, tags: { byte, compile, extension:mli, file:tuple.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o tuple.cmi tuple.mli # cached
# Target: filter_rel.cmi, tags: { byte, compile, extension:mli, file:filter_rel.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o filter_rel.cmi filter_rel.mli # cached
# Target: formula_lexer.mll, tags: { extension:mll, file:formula_lexer.mll, lexer, ocaml, ocamllex, package(lymp), package(str), quiet, thread }
/usr/bin/ocamllex -q formula_lexer.mll # cached
# Target: formula_lexer.ml.depends, tags: { extension:ml, file:formula_lexer.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules formula_lexer.ml > formula_lexer.ml.depends # cached
# Target: formula_parser.mly, tags: { extension:mly, file:formula_parser.mly, infer, ocaml, ocamlyacc, package(lymp), package(str), parser, quiet, thread }
/usr/bin/ocamlyacc formula_parser.mly # cached
# Target: formula_parser.mli.depends, tags: { extension:mli, file:formula_parser.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules formula_parser.mli > formula_parser.mli.depends # cached
# Target: formula_parser.cmi, tags: { byte, compile, extension:mli, file:formula_parser.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o formula_parser.cmi formula_parser.mli # cached
# Target: misc.mli.depends, tags: { extension:mli, file:misc.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules misc.mli > misc.mli.depends # cached
# Target: dllist.mli.depends, tags: { extension:mli, file:dllist.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules dllist.mli > dllist.mli.depends # cached
# Target: dllist.cmi, tags: { byte, compile, extension:mli, file:dllist.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o dllist.cmi dllist.mli # cached
# Target: mqueue.mli.depends, tags: { extension:mli, file:mqueue.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules mqueue.mli > mqueue.mli.depends # cached
# Target: mqueue.cmi, tags: { byte, compile, extension:mli, file:mqueue.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o mqueue.cmi mqueue.mli # cached
# Target: misc.cmi, tags: { byte, compile, extension:mli, file:misc.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o misc.cmi misc.mli # cached
# Target: formula_lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:formula_lexer.cmo, file:formula_lexer.ml, implem, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o formula_lexer.cmo formula_lexer.ml # cached
# Target: log.mli.depends, tags: { extension:mli, file:log.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules log.mli > log.mli.depends # cached
# Target: db.mli.depends, tags: { extension:mli, file:db.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules db.mli > db.mli.depends # cached
# Target: table.mli.depends, tags: { extension:mli, file:table.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules table.mli > table.mli.depends # cached
# Target: relation.mli.depends, tags: { extension:mli, file:relation.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules relation.mli > relation.mli.depends # cached
# Target: relation.cmi, tags: { byte, compile, extension:mli, file:relation.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o relation.cmi relation.mli # cached
# Target: table.cmi, tags: { byte, compile, extension:mli, file:table.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o table.cmi table.mli # cached
# Target: db.cmi, tags: { byte, compile, extension:mli, file:db.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o db.cmi db.mli # cached
# Target: log_parser.mly, tags: { extension:mly, file:log_parser.mly, infer, ocaml, ocamlyacc, package(lymp), package(str), parser, quiet, thread }
/usr/bin/ocamlyacc log_parser.mly # cached
# Target: log_parser.mli.depends, tags: { extension:mli, file:log_parser.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules log_parser.mli > log_parser.mli.depends # cached
# Target: log_parser.cmi, tags: { byte, compile, extension:mli, file:log_parser.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o log_parser.cmi log_parser.mli # cached
# Target: log.cmi, tags: { byte, compile, extension:mli, file:log.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o log.cmi log.mli # cached
# Target: perf.mli.depends, tags: { extension:mli, file:perf.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules perf.mli > perf.mli.depends # cached
# Target: perf.cmi, tags: { byte, compile, extension:mli, file:perf.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o perf.cmi perf.mli # cached
# Target: rewriting.mli.depends, tags: { extension:mli, file:rewriting.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules rewriting.mli > rewriting.mli.depends # cached
# Target: rewriting.cmi, tags: { byte, compile, extension:mli, file:rewriting.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o rewriting.cmi rewriting.mli # cached
# Target: subproc.mli.depends, tags: { extension:mli, file:subproc.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules subproc.mli > subproc.mli.depends # cached
# Target: subproc.cmi, tags: { byte, compile, extension:mli, file:subproc.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o subproc.cmi subproc.mli # cached
# Target: main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o main.cmo main.ml # cached
# Target: algorithm.ml.depends, tags: { extension:ml, file:algorithm.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules algorithm.ml > algorithm.ml.depends # cached
# Target: db.ml.depends, tags: { extension:ml, file:db.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules db.ml > db.ml.depends # cached
# Target: MFOTL.ml.depends, tags: { extension:ml, file:MFOTL.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules MFOTL.ml > MFOTL.ml.depends # cached
# Target: misc.ml.depends, tags: { extension:ml, file:misc.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules misc.ml > misc.ml.depends # cached
# Target: dllist.ml.depends, tags: { extension:ml, file:dllist.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules dllist.ml > dllist.ml.depends # cached
# Target: dllist.cmx, tags: { compile, extension:cmx, extension:ml, file:dllist.cmx, file:dllist.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o dllist.cmx dllist.ml # cached
# Target: mqueue.ml.depends, tags: { extension:ml, file:mqueue.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules mqueue.ml > mqueue.ml.depends # cached
# Target: mqueue.cmx, tags: { compile, extension:cmx, extension:ml, file:mqueue.cmx, file:mqueue.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o mqueue.cmx mqueue.ml # cached
# Target: misc.cmx, tags: { compile, extension:cmx, extension:ml, file:misc.cmx, file:misc.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o misc.cmx misc.ml # cached
# Target: predicate.ml.depends, tags: { extension:ml, file:predicate.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules predicate.ml > predicate.ml.depends # cached
# Target: predicate.cmx, tags: { compile, extension:cmx, extension:ml, file:predicate.cmx, file:predicate.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o predicate.cmx predicate.ml # cached
# Target: MFOTL.cmx, tags: { compile, extension:cmx, extension:ml, file:MFOTL.cmx, file:MFOTL.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o MFOTL.cmx MFOTL.ml # cached
# Target: table.ml.depends, tags: { extension:ml, file:table.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules table.ml > table.ml.depends # cached
# Target: relation.ml.depends, tags: { extension:ml, file:relation.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules relation.ml > relation.ml.depends # cached
# Target: tuple.ml.depends, tags: { extension:ml, file:tuple.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules tuple.ml > tuple.ml.depends # cached
# Target: tuple.cmx, tags: { compile, extension:cmx, extension:ml, file:tuple.cmx, file:tuple.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o tuple.cmx tuple.ml # cached
# Target: relation.cmx, tags: { compile, extension:cmx, extension:ml, file:relation.cmx, file:relation.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o relation.cmx relation.ml # cached
# Target: table.cmx, tags: { compile, extension:cmx, extension:ml, file:table.cmx, file:table.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o table.cmx table.ml # cached
# Target: db.cmx, tags: { compile, extension:cmx, extension:ml, file:db.cmx, file:db.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o db.cmx db.ml # cached
# Target: log.ml.depends, tags: { extension:ml, file:log.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules log.ml > log.ml.depends # cached
# Target: filter_empty_tp.ml.depends, tags: { extension:ml, file:filter_empty_tp.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules filter_empty_tp.ml > filter_empty_tp.ml.depends # cached
# Target: filter_empty_tp.cmx, tags: { compile, extension:cmx, extension:ml, file:filter_empty_tp.cmx, file:filter_empty_tp.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o filter_empty_tp.cmx filter_empty_tp.ml # cached
# Target: log_lexer.mll, tags: { extension:mll, file:log_lexer.mll, lexer, ocaml, ocamllex, package(lymp), package(str), quiet, thread }
/usr/bin/ocamllex -q log_lexer.mll # cached
# Target: log_lexer.ml.depends, tags: { extension:ml, file:log_lexer.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules log_lexer.ml > log_lexer.ml.depends # cached
# Target: log_lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:log_lexer.cmo, file:log_lexer.ml, implem, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o log_lexer.cmo log_lexer.ml # cached
# Target: log_parser.ml.depends, tags: { extension:ml, file:log_parser.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules log_parser.ml > log_parser.ml.depends # cached
# Target: filter_rel.ml.depends, tags: { extension:ml, file:filter_rel.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules filter_rel.ml > filter_rel.ml.depends # cached
# Target: filter_rel.cmx, tags: { compile, extension:cmx, extension:ml, file:filter_rel.cmx, file:filter_rel.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o filter_rel.cmx filter_rel.ml # cached
# Target: log_parser.cmx, tags: { compile, extension:cmx, extension:ml, file:log_parser.cmx, file:log_parser.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o log_parser.cmx log_parser.ml # cached
# Target: log_lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:log_lexer.cmx, file:log_lexer.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o log_lexer.cmx log_lexer.ml # cached
# Target: log.cmx, tags: { compile, extension:cmx, extension:ml, file:log.cmx, file:log.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o log.cmx log.ml # cached
# Target: perf.ml.depends, tags: { extension:ml, file:perf.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules perf.ml > perf.ml.depends # cached
# Target: perf.cmx, tags: { compile, extension:cmx, extension:ml, file:perf.cmx, file:perf.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o perf.cmx perf.ml # cached
# Target: rewriting.ml.depends, tags: { extension:ml, file:rewriting.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules rewriting.ml > rewriting.ml.depends # cached
# Target: subproc.ml.depends, tags: { extension:ml, file:subproc.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules subproc.ml > subproc.ml.depends # cached
# Target: subproc.cmx, tags: { compile, extension:cmx, extension:ml, file:subproc.cmx, file:subproc.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o subproc.cmx subproc.ml # cached
# Target: rewriting.cmx, tags: { compile, extension:cmx, extension:ml, file:rewriting.cmx, file:rewriting.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o rewriting.cmx rewriting.ml # cached
# Target: sliding.ml.depends, tags: { extension:ml, file:sliding.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules sliding.ml > sliding.ml.depends # cached
# Target: sliding.mli.depends, tags: { extension:mli, file:sliding.mli, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules sliding.mli > sliding.mli.depends # cached
# Target: sliding.cmi, tags: { byte, compile, extension:mli, file:sliding.mli, interf, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlc -c -thread -package str -package lymp -o sliding.cmi sliding.mli # cached
# Target: sliding.cmx, tags: { compile, extension:cmx, extension:ml, file:sliding.cmx, file:sliding.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o sliding.cmx sliding.ml # cached
# Target: algorithm.cmx, tags: { compile, extension:cmx, extension:ml, file:algorithm.cmx, file:algorithm.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o algorithm.cmx algorithm.ml # cached
# Target: formula_parser.ml.depends, tags: { extension:ml, file:formula_parser.ml, ocaml, ocamldep, package(lymp), package(str), quiet, thread }
ocamlfind ocamldep -package str -package lymp -modules formula_parser.ml > formula_parser.ml.depends # cached
# Target: formula_parser.cmx, tags: { compile, extension:cmx, extension:ml, file:formula_parser.cmx, file:formula_parser.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o formula_parser.cmx formula_parser.ml # cached
# Target: formula_lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:formula_lexer.cmx, file:formula_lexer.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o formula_lexer.cmx formula_lexer.ml # cached
# Target: main.cmx, tags: { compile, extension:cmx, extension:ml, file:main.cmx, file:main.ml, implem, native, ocaml, package(lymp), package(str), quiet, thread }
ocamlfind ocamlopt -c -thread -package str -package lymp -o main.cmx main.ml # cached
# Target: main.native, tags: { dont_link_with, extension:native, file:main.native, link, native, ocaml, package(lymp), package(str), program, quiet, thread }
ocamlfind ocamlopt -linkpkg -thread -package str -package lymp dllist.cmx mqueue.cmx misc.cmx predicate.cmx MFOTL.cmx tuple.cmx relation.cmx table.cmx db.cmx filter_empty_tp.cmx filter_rel.cmx log_parser.cmx log_lexer.cmx log.cmx perf.cmx subproc.cmx rewriting.cmx sliding.cmx algorithm.cmx formula_parser.cmx formula_lexer.cmx main.cmx -o main.native # cached
# Compilation successful.
